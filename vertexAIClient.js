// vertexAIClient.js

const { VertexAI } = require('@google-cloud/vertexai');
const {
  GOOGLE_CLOUD_PROJECT,
  VERTEX_AI_LOCATION,
  VERTEX_AI_MODEL,
  VERTEX_AI_MODEL_TEXT,
  VERTEX_AI_MODEL_PDF,
  SUMMARIZATION_MAX_OUTPUT_TOKENS,
  SUMMARIZATION_TEMPERATURE,
  SUMMARIZATION_TOP_P,
  SUMMARIZATION_TOP_K,
} = require('./config');

// Initialize Vertex AI client
function initializeVertexAI() {
  if (!GOOGLE_CLOUD_PROJECT) {
    throw new Error('GOOGLE_CLOUD_PROJECT environment variable is not set.');
  }
  if (!VERTEX_AI_LOCATION) {
    throw new Error('VERTEX_AI_LOCATION environment variable is not set.');
  }

  return new VertexAI({
    project: process.env.GOOGLE_CLOUD_PROJECT,
    location: VERTEX_AI_LOCATION,
  });
}

// Function to get a generative model for text summarization
function getTextGenerativeModel() {
  const vertexAI = initializeVertexAI();

  return vertexAI.getGenerativeModel({
    model: VERTEX_AI_MODEL || VERTEX_AI_MODEL_TEXT || 'text-bison',
    generationConfig: {
      maxOutputTokens: SUMMARIZATION_MAX_OUTPUT_TOKENS || 1024,
      temperature: SUMMARIZATION_TEMPERATURE || 0.7,
      topP: SUMMARIZATION_TOP_P || 0.9,
      topK: SUMMARIZATION_TOP_K || 40,
    },
    // Removed the original systemInstruction, since we'll include the prompt in the text
  });
}

// Function to format text for Slack
function formatForSlack(text) {
  return text
    .replace(/```/g, '') // Remove code blocks if present
    .replace(/---/g, '') // Remove triple dashes
    .replace(/^\s+|\s+$/g, '') // Trim leading/trailing whitespace
    .replace(/\*\*/g, '*') // Replace double asterisks with single for bold
    .replace(/__/g, '_'); // Replace double underscores with single for italics
}

// Function to summarize text content
async function summarizeTextContent(text, sourceTitle) {
  try {
    const generativeModel = getTextGenerativeModel();

    // Construct the prompt with the desired instructions
    const promptText = `
Please analyze the following content and provide:

1. *Sentiment Analysis*: Briefly describe the overall sentiment (e.g., positive, negative, neutral) and the tone (e.g., excited, concerned).

2. *Key Takeaways*: List the top 3 key points or takeaways in bullet points.

3. *Summary*: Provide a concise summary of the content.

Format your response using Slack's formatting syntax:

---

*Content Analyzed*: ${sourceTitle}

*Sentiment*: _<Sentiment Analysis>_

*Key Takeaways*:
1. ...
2. ...
3. ...

*Summary*:
<Summary Here>

---

Here is the content:

${text}
    `;

    const request = {
      contents: [{ role: 'user', parts: [{ text: promptText }] }],
    };

    console.log('[INFO] Sending text to Vertex AI for summarization...');
    const response = await generativeModel.generateContent(request);

    const candidate = response?.response?.candidates?.[0];
    let summary = candidate?.content?.parts?.[0]?.text;

    if (!summary) {
      console.error('[ERROR] No summary generated by the model.');
      throw new Error('The model did not generate a summary.');
    }

    // Post-process the summary to ensure Slack formatting
    summary = formatForSlack(summary);

    console.log('[INFO] Text summary successfully generated.');
    return summary;
  } catch (error) {
    console.error(`[ERROR] Error during text summarization: ${error.message}`);
    throw new Error('Failed to summarize the text content.');
  }
}

// Function to get a generative model for PDF summarization
function getPDFGenerativeModel() {
  const vertexAI = initializeVertexAI();

  return vertexAI.getGenerativeModel({
    model: VERTEX_AI_MODEL_PDF || 'gemini-1.5-flash-002',
  });
}

// Function to summarize a PDF document from GCS
async function summarizeDocumentFromGCS(gcsUri, documentTitle) {
  try {
    const generativeModel = getPDFGenerativeModel();

    const filePart = {
      file_data: {
        file_uri: gcsUri,
        mime_type: 'application/pdf',
      },
    };

    const textPart = {
      text: `
Please analyze the attached document and provide:

1. *Sentiment Analysis*: Briefly describe the overall sentiment (e.g., positive, negative, neutral) and the tone.

2. *Key Takeaways*: List the top 3 key points or takeaways in bullet points.

3. *Summary*: Provide a concise summary of the content.

Format your response using Slack's formatting syntax:

---

*Document Analyzed*: ${documentTitle}

*Sentiment*: _<Sentiment Analysis>_

*Key Takeaways*:
1. ...
2. ...
3. ...

*Summary*:
<Summary Here>

---

`,
    };

    const request = {
      contents: [{ role: 'user', parts: [filePart, textPart] }],
    };

    console.log(`[INFO] Sending PDF from GCS (${gcsUri}) to Vertex AI for summarization...`);

    const response = await generativeModel.generateContent(request);

    const candidate = response?.response?.candidates?.[0];
    let summary = candidate?.content?.parts?.[0]?.text;

    if (!summary) {
      console.error('[ERROR] No summary generated by the model.');
      throw new Error('The model did not generate a summary.');
    }

    // Post-process the summary to ensure Slack formatting
    summary = formatForSlack(summary);

    console.log('[INFO] PDF summary successfully generated.');
    return summary;
  } catch (error) {
    console.error(`[ERROR] Error during PDF summarization: ${error.message}`);
    throw new Error('Failed to summarize the PDF document.');
  }
}

module.exports = {
  summarizeTextContent,
  summarizeDocumentFromGCS,
};