// utils.js

const axios = require('axios');
const { VERTEX_AI_MODEL, VERTEX_AI_LOCATION } = require('./config');
const { VertexAI } = require('@google-cloud/vertexai');

/**
 * Download a file from Slack
 * @param {string} url - The private URL of the file to download
 * @param {string} mimeType - The MIME type of the file being downloaded
 * @returns {Promise<Buffer>} - Returns the file content in a Buffer
 */
async function downloadFile(url, mimeType) {
  try {
    const response = await axios.get(url, {
      responseType: 'arraybuffer',
      headers: {
        Authorization: `Bearer ${process.env.SLACK_BOT_TOKEN}`,
        'Content-Type': mimeType,
      },
    });
    return Buffer.from(response.data);
  } catch (error) {
    console.error('Error downloading file:', error);
    throw new Error('Failed to download file from Slack.');
  }
}

/**
 * Summarize a document using the Gemini model
 * @param {Buffer} fileContent - The content of the file as a Buffer
 * @returns {Promise<string>} - Returns the summary as a string
 */
async function summarizeDocument(fileContent) {
  const vertexAI = new VertexAI({
    project: process.env.GOOGLE_CLOUD_PROJECT,
    location: VERTEX_AI_LOCATION,
  });

  try {
    // Initialize the generative model
    const generativeModel = vertexAI.getGenerativeModel({
      model: VERTEX_AI_MODEL,
    });

    const filePart = {
      file_data: {
        file_bytes: fileContent,
        mime_type: 'application/pdf', // You can adjust this based on file type
      },
    };
    const textPart = {
      text: `
      You are a very professional document summarization specialist.
      Please summarize the given document.`,
    };

    const request = {
      contents: [{ role: 'user', parts: [filePart, textPart] }],
    };

    // Make the request to the Vertex AI model
    const resp = await generativeModel.generateContent(request);
    const contentResponse = resp.response;

    // Extract the summary text from the response
    const candidate = contentResponse && contentResponse.candidates && contentResponse.candidates[0];
    const summary = candidate?.content?.parts?.[0]?.text;

    if (!summary) {
      console.error('No summary generated by the model.');
      return 'The model did not generate a summary.';
    }

    return summary;
  } catch (error) {
    console.error('Error summarizing document:', error);
    return 'An error occurred while generating the summary.';
  }
}

module.exports = {
  downloadFile,
  summarizeDocument,
};
